AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: PhotoOpsAI central application platform

Parameters:
  ServiceName:
    Type: String
    Description: "Name of service"
    Default: "PhotoOps"

  ServiceEnv:
    Type: String
    Description: "Name of deployment environment"
    Default: "prime"

  LogLevel:
    Type: String
    Description: "Log level for functions; used internally in code."
    Default: 'INFO'
    AllowedValues:
      - 'DEBUG'
      - 'INFO'
      - 'WARNING'
      - 'ERROR'
      - 'CRITICAL'

  XRaySDKEnabled:
    Type: String
    Description: "AWS X-RAY SDK enabled"
    Default: 'Disabled'
    AllowedValues:
      - 'Enabled'
      - 'Disabled'

  XRayTracingMode:
    Type: String
    Description: "AWS XRay tracing mode"
    Default: PassThrough
    AllowedValues:
      - Active
      - PassThrough



Mappings:
  XRaySDKEnabled:
    Enabled:
      Enabled: "true"
    Disabled:
      Enabled: "false"

Globals:
  Function:
    Environment:
      Variables:
        LOG_LEVEL:
          Ref: LogLevel
        AWS_XRAY_SDK_ENABLED:
          Fn::FindInMap:
            - XRaySDKEnabled
            - Ref: XRaySDKEnabled
            - Enabled
    Tags:
      ServiceName: !Ref ServiceName
      ServiceEnv: !Ref ServiceEnv
    Tracing: !Ref XRayTracingMode


Resources:
  IngestPhoto:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Ingest a new photo into PhotoOps"
      CodeUri: src/handlers/IngestPhoto
      Handler: function.handler
      Runtime: python3.8
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          DDB_TABLE_NAME: !Ref DynamoDBTable
          EVENT_BRIDGE_NAME: !Ref EventBridge
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn:
          Fn::GetAtt: IngestPhotoDlqQueue.Arn
      Events:
        SnsEvent:
          Type: SNS
          Properties:
            Topic: !Ref PhotoOpsIngestTopic
      Policies:
        - Statement:
          - Effect: "Allow"
            Action:
              - "ssm:GetParameter"
            Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ServiceName}/${ServiceEnv}/*"
          - Effect: "Allow"
            Action:
              - "dynamodb:PutItem"
              - "dynamodb:UpdateItem"
            Resource: !GetAtt DynamoDBTable.Arn
          - Effect: "Allow"
            Action:
              - "events:PutEvents"
            Resource: !GetAtt EventBridge.Arn

  IngestPhotoDlqQueue:
    Type: AWS::SQS::Queue


  CreateJpeg:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Create JPEG image for cache"
      CodeUri: src/handlers/CreateJpeg
      Handler: function.handler
      Runtime: python3.8
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          DDB_TABLE_NAME: !Ref DynamoDBTable
          JPEG_CACHE_BUCKET: !Ref JpegCacheBucket
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn:
          Fn::GetAtt: CreateJpegDlqQueue.Arn
      # FIXME: We have no trigger events because it's intended to be a part of
      # Step Function state machine. However we are creating a cross service
      # boundary dependency which really bothers me.
      Policies:
        - Statement:
          - Effect: "Allow"
            Action:
              - "ssm:GetParameter"
            Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ServiceName}/${ServiceEnv}/*"
          - Effect: "Allow"
            Action:
              - "dynamodb:UpdateItem"
            Resource: !GetAtt DynamoDBTable.Arn
          - Effect: "Allow"
            Action:
              - "s3:PutObject"
            Resource: !GetAtt JpegCacheBucket.Arn

  CreateJpegDlqQueue:
    Type: AWS::SQS::Queue

  JpegCacheBucket:
    Type: AWS::S3::Bucket
    Properties:
      # NOTE: We set a shorter expiration time in CreateJpeg. This is just
      # here as an added insurance policy.
      #
      # FIXME: On the event of an object expiration time and bucket lifecycle
      # rule, who wins?
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 90
            Status: Enabled

  PhotoOpsIngestTopic:
    Type: AWS::SNS::Topic

  PhotoOpsIngestTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: "PhotoOpsIngestTopicPolicy"
        Version: "2012-10-17"
        Statement:
        - Sid: "GlobalWrite"
          Effect: Allow
          Principal:
            AWS: "*"
          Action: sns:Publish
          Resource: !Ref PhotoOpsIngestTopic
      Topics:
        - !Ref PhotoOpsIngestTopic


  EventBridge:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub "${ServiceName}-${ServiceEnv}"


  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    # NOTE: Retain data by default
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AttributeDefinitions:
        - AttributeName: "pk"
          AttributeType: "S"
        - AttributeName: "sk"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "pk"
          KeyType: "HASH"
        - AttributeName: "sk"
          KeyType: "RANGE"
      TimeToLiveSpecification:
        AttributeName: "ttl"
        Enabled: true
      BillingMode: "PAY_PER_REQUEST"


  CloudWatchTopic:
    Type: AWS::SNS::Topic


  # SSM Parameters
  PhotoOpsIngestTopicArn:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/PhotoOpsAI/${ServiceName}/${ServiceEnv}/PhotoOpsIngestTopicArn"
      Type: String
      Description: "Ingest SNS topic ARN"
      Value: !Ref PhotoOpsIngestTopic

  DynamoDBTableName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/PhotoOpsAI/${ServiceName}/${ServiceEnv}/DynamoDBTableName"
      Type: String
      Description: "DDB table name"
      Value: !Ref DynamoDBTable

  EventBusArn:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/PhotoOpsAI/${ServiceName}/${ServiceEnv}/EventBusArn"
      Type: String
      Description: "Event Bus ARN"
      Value: !GetAtt EventBridge.Arn

  EventBusName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/PhotoOpsAI/${ServiceName}/${ServiceEnv}/EventBusName"
      Type: String
      Description: "Event Bus Name"
      Value: !Ref EventBridge

  CloudWatchTopicArn:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/PhotoOpsAI/${ServiceName}/${ServiceEnv}/CloudWatchTopicArn"
      Type: String
      Description: "CloudWatch SNS Topic ARN"
      Value: !Ref CloudWatchTopic

Outputs:
  PhotoOpsIngestTopicArn:
    Description: "ARN of PhotoOps Ingest topic ARN"
    Value: !Ref PhotoOpsIngestTopic

  DynamoDBTableName:
    Description: "Name of DynamoDB table"
    Value: !Ref DynamoDBTable

  EventBusArn:
    Description: "ARN of event bus"
    Value: !GetAtt EventBridge.Arn

  EventBusName:
    Description: "Name of event bus"
    Value: !Ref EventBridge

  CloudWatchTopicArn:
    Description: "ARN of CloudWatch topic"
    Value: !Ref CloudWatchTopic


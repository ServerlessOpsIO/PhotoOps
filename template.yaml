AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: PhotoOpsAI central application platform

Parameters:
  ServiceName:
    Type: String
    Description: "Name of service"
    Default: "PhotoOps"

  ServiceEnv:
    Type: String
    Description: "Name of deployment environment"
    Default: "prime"

  LogLevel:
    Type: String
    Description: "Log level for functions; used internally in code."
    Default: 'INFO'
    AllowedValues:
      - 'DEBUG'
      - 'INFO'
      - 'WARNING'
      - 'ERROR'
      - 'CRITICAL'

  XRaySDKEnabled:
    Type: String
    Description: "AWS X-RAY SDK enabled"
    Default: 'Disabled'
    AllowedValues:
      - 'Enabled'
      - 'Disabled'

  XRayTracingMode:
    Type: String
    Description: "AWS XRay tracing mode"
    Default: PassThrough
    AllowedValues:
      - Active
      - PassThrough



Mappings:
  XRaySDKEnabled:
    Enabled:
      Enabled: "true"
    Disabled:
      Enabled: "false"

Globals:
  Function:
    Environment:
      Variables:
        LOG_LEVEL:
          Ref: LogLevel
        AWS_XRAY_SDK_ENABLED:
          Fn::FindInMap:
            - XRaySDKEnabled
            - Ref: XRaySDKEnabled
            - Enabled
    Tags:
      ServiceName: !Ref ServiceName
      ServiceEnv: !Ref ServiceEnv
    Tracing: !Ref XRayTracingMode


Resources:
  IngestS3Event:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Ingest an S3 event"
      CodeUri: src/handlers/IngestS3Event
      Handler: function.handler
      Runtime: python3.8
      MemorySize: 128
      Timeout: 3
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !GetAtt IngestS3EventDlqQueue.Arn
      Events:
        SnsEvent:
          Type: SNS
          Properties:
            Topic: !Ref PhotoOpsIngestTopic
      EventInvokeConfig:
        DestinationConfig:
          OnSuccess:
            Type: EventBridge
            Destination: !GetAtt EventBus.Arn

  IngestS3EventDlqQueue:
    Type: AWS::SQS::Queue


  # FIXME: Running close to memory limit but don't want to bump memory up for
  # all transactions. Possibly we create small, medium, and large functions
  # where we use the object size in the S3 event as a determining factor for
  # which function gets invoked.
  GetExifData:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Get EXIF data"
      CodeUri: src/handlers/GetExifData
      Handler: function.handler
      Runtime: python3.8
      MemorySize: 128
      Timeout: 30
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !GetAtt GetExifDataDlqQueue.Arn
      Role: !GetAtt GetExifDataIamRole.Arn
      Events:
        EventBridgeEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref EventBus
            InputPath: "$.detail.responsePayload"
            Pattern:
              source: [ "lambda" ]
              detail-type: [ "Lambda Function Invocation Result - Success" ]
              detail:
                requestPayload:
                  Records:
                    Sns:
                      TopicArn: [ !Ref PhotoOpsIngestTopic ]
                responsePayload:
                  Records:
                    eventSource: [ "aws:s3" ]
                    # FIXME: Is this all the possible event names?
                    eventName:
                      - prefix: "ObjectCreated:"
      EventInvokeConfig:
        DestinationConfig:
          OnSuccess:
            Type: EventBridge
            Destination: !GetAtt EventBus.Arn

  GetExifDataDlqQueue:
    Type: AWS::SQS::Queue

  GetExifDataIamRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${AWS::StackName}-GetExifData"
      Path: "/PhotoOpsAI/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
      Policies:
        - PolicyName: "EventBridgePutEvent"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "PutEvent"
                Effect: "Allow"
                Action:
                  - "events:PutEvents"
                Resource: !GetAtt EventBus.Arn
        - PolicyName: "DlqWrite"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "PutMessage"
                Effect: "Allow"
                Action:
                  - "sqs:SendMessage"
                Resource: !GetAtt GetExifDataDlqQueue.Arn
        - PolicyName: "DownloadS3Object"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "GetS3Object"
                Effect: "Allow"
                Action:
                  - "s3:GetObject"
                Resource: "arn:aws:s3:::*/*"
              - Sid: "ListS3Bucket"
                Effect: "Allow"
                Action:
                  - "s3:ListBucket"
                Resource: "arn:aws:s3:::*/"


  GetExifCameraData:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Get EXIF camera data"
      CodeUri: src/handlers/GetExifCameraData
      Handler: function.handler
      Runtime: python3.8
      MemorySize: 128
      Timeout: 3
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !GetAtt GetExifCameraDataDlqQueue.Arn
      Events:
        EventBridgeEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref EventBus
            InputPath: "$.detail.responsePayload.Item"
            Pattern:
              source: [ "lambda" ]
              detail-type: [ "Lambda Function Invocation Result - Success" ]
              detail:
                responsePayload:
                  Item:
                    pk:
                      - exists: true
                    sk:
                      - 'exif#v0'
      EventInvokeConfig:
        DestinationConfig:
          OnSuccess:
            Type: EventBridge
            Destination: !GetAtt EventBus.Arn

  GetExifCameraDataDlqQueue:
    Type: AWS::SQS::Queue


  GetExifLensData:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Get EXIF lens data"
      CodeUri: src/handlers/GetExifLensData
      Handler: function.handler
      Runtime: python3.8
      MemorySize: 128
      Timeout: 3
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !GetAtt GetExifLensDataDlqQueue.Arn
      Events:
        EventBridgeEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref EventBus
            InputPath: "$.detail.responsePayload.Item"
            Pattern:
              source: [ "lambda" ]
              detail-type: [ "Lambda Function Invocation Result - Success" ]
              detail:
                responsePayload:
                  Item:
                    pk:
                      - exists: true
                    sk:
                      - 'exif#v0'
      EventInvokeConfig:
        DestinationConfig:
          OnSuccess:
            Type: EventBridge
            Destination: !GetAtt EventBus.Arn

  GetExifLensDataDlqQueue:
    Type: AWS::SQS::Queue


  GetExifLocationData:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Get EXIF location data"
      CodeUri: src/handlers/GetExifLocationData
      Handler: function.handler
      Runtime: python3.8
      MemorySize: 128
      Timeout: 3
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !GetAtt GetExifLocationDataDlqQueue.Arn
      Events:
        EventBridgeEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref EventBus
            InputPath: "$.detail.responsePayload.Item"
            Pattern:
              source: [ "lambda" ]
              detail-type: [ "Lambda Function Invocation Result - Success" ]
              detail:
                responsePayload:
                  Item:
                    pk:
                      - exists: true
                    sk:
                      - 'exif#v0'
      EventInvokeConfig:
        DestinationConfig:
          OnSuccess:
            Type: EventBridge
            Destination: !GetAtt EventBus.Arn

  GetExifLocationDataDlqQueue:
    Type: AWS::SQS::Queue


  PutDdbItem:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Put a DDB Item"
      CodeUri: src/handlers/PutDdbItem
      Handler: function.handler
      Runtime: python3.8
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          DDB_TABLE_NAME: !Ref DynamoDBTable
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !GetAtt PutDdbItemDlqQueue.Arn
      Policies:
        - Statement:
          - Effect: "Allow"
            Action:
              - "dynamodb:PutItem"
              - "dynamodb:UpdateItem"
            Resource: !GetAtt DynamoDBTable.Arn
      Events:
        EventBridgeEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref EventBus
            InputPath: "$.detail.responsePayload"
            Pattern:
              source: [ "lambda" ]
              detail-type: [ "Lambda Function Invocation Result - Success" ]
              detail:
                responsePayload:
                  Item:
                    pk:
                      - exists: true
                    sk:
                      - exists: true
      EventInvokeConfig:
        DestinationConfig:
          OnSuccess:
            Type: EventBridge
            Destination: !GetAtt EventBus.Arn

  PutDdbItemDlqQueue:
    Type: AWS::SQS::Queue


  PhotoOpsIngestTopic:
    Type: AWS::SNS::Topic

  PhotoOpsIngestTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: "PhotoOpsIngestTopicPolicy"
        Version: "2012-10-17"
        Statement:
        - Sid: "GlobalWrite"
          Effect: Allow
          Principal:
            AWS: "*"
          Action: sns:Publish
          Resource: !Ref PhotoOpsIngestTopic
      Topics:
        - !Ref PhotoOpsIngestTopic


  EventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub "${ServiceName}-${ServiceEnv}"

  EventBusLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/events/${EventBus}/all"
      RetentionInDays: 7

  EventBusLogGroupRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Log all events to CloudWatch"
      EventBusName: !Ref EventBus
      EventPattern:
        account:
          - !Ref AWS::AccountId
      Targets:
        - Arn: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${EventBusLogGroup}"
          Id: "EventBusLogGroup"


  # Grant eventBus ability to deliver logs to CW.
  #
  # ref: https://github.com/aws-cloudformation/cloudformation-coverage-roadmap/issues/351#issuecomment-887045751
  LogGroupForEventsPolicy:
    Type: AWS::Logs::ResourcePolicy
    Properties:
      PolicyName: EventBridgeToCWLogsPolicy
      PolicyDocument: !Sub
        - >
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid": "EventBridgetoCWLogsPolicy",
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "delivery.logs.amazonaws.com",
                    "events.amazonaws.com"
                  ]
                },
                "Action": [
                  "logs:CreateLogStream",
                  "logs:PutLogEvents"
                ],
                "Resource": [
                  "${logArn}"
                ],
                "Condition": {
                  "ArnEquals": {"aws:SourceArn": "${ruleArn}"}
                }
              }
            ]
          }
        - { logArn: !GetAtt EventBusLogGroup.Arn, ruleArn:  !GetAtt EventBusLogGroupRule.Arn}



  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    # NOTE: Retain data by default
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AttributeDefinitions:
        - AttributeName: "pk"
          AttributeType: "S"
        - AttributeName: "sk"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "pk"
          KeyType: "HASH"
        - AttributeName: "sk"
          KeyType: "RANGE"
      TimeToLiveSpecification:
        AttributeName: "ttl"
        Enabled: true
      BillingMode: "PAY_PER_REQUEST"


  # For CloudWatch Alarms
  CloudWatchTopic:
    Type: AWS::SNS::Topic


  # SSM Parameters
  PhotoOpsIngestTopicArn:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/PhotoOpsAI/${ServiceName}/${ServiceEnv}/PhotoOpsIngestTopicArn"
      Type: String
      Description: "Ingest SNS topic ARN"
      Value: !Ref PhotoOpsIngestTopic

  DynamoDBTableName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/PhotoOpsAI/${ServiceName}/${ServiceEnv}/DynamoDBTableName"
      Type: String
      Description: "DDB table name"
      Value: !Ref DynamoDBTable

  EventBusArn:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/PhotoOpsAI/${ServiceName}/${ServiceEnv}/EventBusArn"
      Type: String
      Description: "Event Bus ARN"
      Value: !GetAtt EventBus.Arn

  EventBusName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/PhotoOpsAI/${ServiceName}/${ServiceEnv}/EventBusName"
      Type: String
      Description: "Event Bus Name"
      Value: !Ref EventBus

  CloudWatchTopicArn:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/PhotoOpsAI/${ServiceName}/${ServiceEnv}/CloudWatchTopicArn"
      Type: String
      Description: "CloudWatch SNS Topic ARN"
      Value: !Ref CloudWatchTopic

Outputs:
  PhotoOpsIngestTopicArn:
    Description: "ARN of PhotoOps Ingest topic ARN"
    Value: !Ref PhotoOpsIngestTopic

  DynamoDBTableName:
    Description: "Name of DynamoDB table"
    Value: !Ref DynamoDBTable

  EventBusArn:
    Description: "ARN of event bus"
    Value: !GetAtt EventBus.Arn

  EventBusName:
    Description: "Name of event bus"
    Value: !Ref EventBus

  CloudWatchTopicArn:
    Description: "ARN of CloudWatch topic"
    Value: !Ref CloudWatchTopic

